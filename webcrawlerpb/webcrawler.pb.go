// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: webcrawlerpb/webcrawler.proto

package webcrawlerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartUrl  string `protobuf:"bytes,1,opt,name=startUrl,proto3" json:"startUrl,omitempty"`
	TreeLink  string `protobuf:"bytes,2,opt,name=treeLink,proto3" json:"treeLink,omitempty"`
	PageTitle string `protobuf:"bytes,3,opt,name=pageTitle,proto3" json:"pageTitle,omitempty"`
}

func (x *TreeRequest) Reset() {
	*x = TreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcrawlerpb_webcrawler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeRequest) ProtoMessage() {}

func (x *TreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_webcrawlerpb_webcrawler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeRequest.ProtoReflect.Descriptor instead.
func (*TreeRequest) Descriptor() ([]byte, []int) {
	return file_webcrawlerpb_webcrawler_proto_rawDescGZIP(), []int{0}
}

func (x *TreeRequest) GetStartUrl() string {
	if x != nil {
		return x.StartUrl
	}
	return ""
}

func (x *TreeRequest) GetTreeLink() string {
	if x != nil {
		return x.TreeLink
	}
	return ""
}

func (x *TreeRequest) GetPageTitle() string {
	if x != nil {
		return x.PageTitle
	}
	return ""
}

type StartResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StartResponse) Reset() {
	*x = StartResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcrawlerpb_webcrawler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartResponse) ProtoMessage() {}

func (x *StartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_webcrawlerpb_webcrawler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartResponse.ProtoReflect.Descriptor instead.
func (*StartResponse) Descriptor() ([]byte, []int) {
	return file_webcrawlerpb_webcrawler_proto_rawDescGZIP(), []int{1}
}

func (x *StartResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type StopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopUrl string `protobuf:"bytes,1,opt,name=stopUrl,proto3" json:"stopUrl,omitempty"`
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcrawlerpb_webcrawler_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_webcrawlerpb_webcrawler_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_webcrawlerpb_webcrawler_proto_rawDescGZIP(), []int{2}
}

func (x *StopRequest) GetStopUrl() string {
	if x != nil {
		return x.StopUrl
	}
	return ""
}

type StopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StopResponse) Reset() {
	*x = StopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcrawlerpb_webcrawler_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopResponse) ProtoMessage() {}

func (x *StopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_webcrawlerpb_webcrawler_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopResponse.ProtoReflect.Descriptor instead.
func (*StopResponse) Descriptor() ([]byte, []int) {
	return file_webcrawlerpb_webcrawler_proto_rawDescGZIP(), []int{3}
}

func (x *StopResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListRequest) Reset() {
	*x = ListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_webcrawlerpb_webcrawler_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRequest) ProtoMessage() {}

func (x *ListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_webcrawlerpb_webcrawler_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRequest.ProtoReflect.Descriptor instead.
func (*ListRequest) Descriptor() ([]byte, []int) {
	return file_webcrawlerpb_webcrawler_proto_rawDescGZIP(), []int{4}
}

var File_webcrawlerpb_webcrawler_proto protoreflect.FileDescriptor

var file_webcrawlerpb_webcrawler_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x77, 0x65, 0x62, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x62, 0x2f, 0x77,
	0x65, 0x62, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x77, 0x65, 0x62, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x22, 0x63, 0x0a, 0x0b, 0x54,
	0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x22, 0x29, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x27, 0x0a, 0x0b, 0x53,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x6f, 0x70, 0x55, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f,
	0x70, 0x55, 0x72, 0x6c, 0x22, 0x28, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x0d,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0xc6, 0x01,
	0x0a, 0x0a, 0x57, 0x65, 0x62, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x63, 0x72, 0x61, 0x77, 0x6c,
	0x65, 0x72, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x77, 0x65, 0x62, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x04, 0x53,
	0x74, 0x6f, 0x70, 0x12, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x77,
	0x65, 0x62, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x00, 0x30, 0x01, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x2f, 0x77, 0x65, 0x62, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_webcrawlerpb_webcrawler_proto_rawDescOnce sync.Once
	file_webcrawlerpb_webcrawler_proto_rawDescData = file_webcrawlerpb_webcrawler_proto_rawDesc
)

func file_webcrawlerpb_webcrawler_proto_rawDescGZIP() []byte {
	file_webcrawlerpb_webcrawler_proto_rawDescOnce.Do(func() {
		file_webcrawlerpb_webcrawler_proto_rawDescData = protoimpl.X.CompressGZIP(file_webcrawlerpb_webcrawler_proto_rawDescData)
	})
	return file_webcrawlerpb_webcrawler_proto_rawDescData
}

var file_webcrawlerpb_webcrawler_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_webcrawlerpb_webcrawler_proto_goTypes = []interface{}{
	(*TreeRequest)(nil),   // 0: webcrawler.TreeRequest
	(*StartResponse)(nil), // 1: webcrawler.StartResponse
	(*StopRequest)(nil),   // 2: webcrawler.StopRequest
	(*StopResponse)(nil),  // 3: webcrawler.StopResponse
	(*ListRequest)(nil),   // 4: webcrawler.ListRequest
}
var file_webcrawlerpb_webcrawler_proto_depIdxs = []int32{
	0, // 0: webcrawler.WebCrawler.Start:input_type -> webcrawler.TreeRequest
	2, // 1: webcrawler.WebCrawler.Stop:input_type -> webcrawler.StopRequest
	4, // 2: webcrawler.WebCrawler.List:input_type -> webcrawler.ListRequest
	1, // 3: webcrawler.WebCrawler.Start:output_type -> webcrawler.StartResponse
	3, // 4: webcrawler.WebCrawler.Stop:output_type -> webcrawler.StopResponse
	0, // 5: webcrawler.WebCrawler.List:output_type -> webcrawler.TreeRequest
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_webcrawlerpb_webcrawler_proto_init() }
func file_webcrawlerpb_webcrawler_proto_init() {
	if File_webcrawlerpb_webcrawler_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_webcrawlerpb_webcrawler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcrawlerpb_webcrawler_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcrawlerpb_webcrawler_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcrawlerpb_webcrawler_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_webcrawlerpb_webcrawler_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_webcrawlerpb_webcrawler_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_webcrawlerpb_webcrawler_proto_goTypes,
		DependencyIndexes: file_webcrawlerpb_webcrawler_proto_depIdxs,
		MessageInfos:      file_webcrawlerpb_webcrawler_proto_msgTypes,
	}.Build()
	File_webcrawlerpb_webcrawler_proto = out.File
	file_webcrawlerpb_webcrawler_proto_rawDesc = nil
	file_webcrawlerpb_webcrawler_proto_goTypes = nil
	file_webcrawlerpb_webcrawler_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WebCrawlerClient is the client API for WebCrawler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebCrawlerClient interface {
	Start(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (WebCrawler_ListClient, error)
}

type webCrawlerClient struct {
	cc grpc.ClientConnInterface
}

func NewWebCrawlerClient(cc grpc.ClientConnInterface) WebCrawlerClient {
	return &webCrawlerClient{cc}
}

func (c *webCrawlerClient) Start(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/webcrawler.WebCrawler/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webCrawlerClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/webcrawler.WebCrawler/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webCrawlerClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (WebCrawler_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WebCrawler_serviceDesc.Streams[0], "/webcrawler.WebCrawler/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &webCrawlerListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WebCrawler_ListClient interface {
	Recv() (*TreeRequest, error)
	grpc.ClientStream
}

type webCrawlerListClient struct {
	grpc.ClientStream
}

func (x *webCrawlerListClient) Recv() (*TreeRequest, error) {
	m := new(TreeRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WebCrawlerServer is the server API for WebCrawler service.
type WebCrawlerServer interface {
	Start(context.Context, *TreeRequest) (*StartResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	List(*ListRequest, WebCrawler_ListServer) error
}

// UnimplementedWebCrawlerServer can be embedded to have forward compatible implementations.
type UnimplementedWebCrawlerServer struct {
}

func (*UnimplementedWebCrawlerServer) Start(context.Context, *TreeRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedWebCrawlerServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (*UnimplementedWebCrawlerServer) List(*ListRequest, WebCrawler_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}

func RegisterWebCrawlerServer(s *grpc.Server, srv WebCrawlerServer) {
	s.RegisterService(&_WebCrawler_serviceDesc, srv)
}

func _WebCrawler_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCrawlerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webcrawler.WebCrawler/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCrawlerServer).Start(ctx, req.(*TreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebCrawler_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebCrawlerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webcrawler.WebCrawler/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebCrawlerServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebCrawler_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebCrawlerServer).List(m, &webCrawlerListServer{stream})
}

type WebCrawler_ListServer interface {
	Send(*TreeRequest) error
	grpc.ServerStream
}

type webCrawlerListServer struct {
	grpc.ServerStream
}

func (x *webCrawlerListServer) Send(m *TreeRequest) error {
	return x.ServerStream.SendMsg(m)
}

var _WebCrawler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "webcrawler.WebCrawler",
	HandlerType: (*WebCrawlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _WebCrawler_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _WebCrawler_Stop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _WebCrawler_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "webcrawlerpb/webcrawler.proto",
}
